#Import libraries
from datetime import datetime
from datetime import date
import RPi.GPIO as GPIO
GPIO.setmode(GPIO.BOARD)
import sqlite3

# main function to drive solar tracker
# Import moduesl
from database.py import Database
from solarVector.py import solarVector
from .SolarPanel import analog_to_digital_implementation

# Values from UI

longitude = 40.79

latitude = -77.6

tzn = -5

# Creating the databases
# Solar Vectoring is mode 0 and Solar Tracking is mode 1 when using both is mode 2
# For calling functions in database daily database is assigned a value of 0 while full database is assigned a value of 1
# Calling functions in database import will be (which database, type of information stored, information)
# addToDatabaseInt
# addToDatabaseFloat
# addToDatabaseString

conn = sqlite3.connect('data')
c = conn.cursor()

c.execute(""" 
          CREATE TABLE dailyDatabase(
          xStroke real, 
          yStroke real, 
          mode integer, 
          time text
          )""")
conn.commit()

c.execute(""" 
          CREATE TABLE fullDatabase(
          power real, 
          sunrise text, 
          sunset text,
	  	  date text
          )""")

conn.commit()
now = datetime.now()
curDate = date.today()
fakeHour = 10
fakeMin = 0
i = 0
fakeTime = ""

while i < 72:
    if fakeMin < 10:
        fakeTime = str(fakeHour) + ":0" + str(fakeMin) + ":00"
    elif fakeMin >= 10: 
        fakeTime = str(fakeHour) + ":" + str(fakeMin) + ":00"
    if fakeMin == 55:
        fakeMin = 0
        fakeHour += 1
    else:
        fakeMin += 5
    i += 1
    addToDaily(strokeX(latitude, longitude, curDate, fakeTime, tzn), strokeX(latitude, longitude, curDate, fakeTime, tzn), 0, fakeTime)

def initAct():
	move(1, 'rev', 40)
	move(2, 'rev', 40)



# Sun Vectoring
initAct() 
curXStroke = 0
curYStroke = 0
while(mode == 0):
	# Initiating date and time

	now = datetime.now()
	curDate = date.today()

	curTime = now.strftime("%H:%M:%S")
	curHours = int(now.strftime("%H"))
	curMinutes = int(now.strftime("%M"))
	c.execute("SELECT * FROM dailyDatabase WHERE time = " + curTime)
	if (curHours >= 8 and curMinutes % 5 == 0 and curHours <= 16):
		newXStroke = c.fetchone()[0]
		newYStroke = c.fetchone()[1]
		if (curXStroke < newXStroke):
			move(1, 'fwd', (newXStroke-curXStroke)/10)
		else:
			move(1, 'rev', (curXStroke-newXStroke)/10)
		curXStroke = newXStroke
		if (curYStroke < yStroke):
			move(2, 'fwd', (newYStroke-curYStroke)/10)
		else:
			move(2, 'rev', (curYStroke-newYStroke)/10)
		curYStroke = newYStroke

# Solar Tracking

# Check back later
#  [tl, tr, bl, br] = read_photodiodes()
# actuator on front and right of device.
# set time to actuate for solar tracking
t = .10
if (tl > bl) and (tl > br) and (tr > bl) and (tr > br):
	move(1, 'fwd', t)
if (bl > tl) and (bl > tr) and (br > tl) and (br > tr):
	move(1, 'rev', t)

if (tr > tl) and (tr > bl) and (br > tl) and (br > bl):
	move(2, 'fwd', t)
if (tl > tr) and (tl > br) and (bl > tr) and (bl > tl):
	move(2, 'rev', t)
# Diagonal Conditions
if (tr > tl) and (tr > bl) and (tr > br):
	move(1, 'fwd', t)
	move(2, 'fwd', t)
if (tl > tr) and (tl > bl) and (tl > br):
	move(1, 'fwd', t)
	move(2, 'rev', t)
if (bl > tr) and (bl > tl) and (bl > br):
	move(1, 'rev', t)
	move(2, 'rev', t)
if (br > tl) and (br > tr) and (br > bl):
	move(1, 'rev', t)
	move(2, 'fwd', t)

# def move(actNum, dir, t):
# 	if (actNum == 1):
# 		if (dir == 'fwd'):

# 		if (dir == 'rev'):

# 	if (actNum == 2):
# 		if (dir == 'fwd'):

# 		if(dir == 'rev'):

# Deleting the daily table

c.execute("DROP TABLE dailyDatabase")

conn.commit()

conn.close()
