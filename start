#Import libraries
from datetime import datetime
import RPi.GPIO as GPIO
GPIO.setmode(GPIO.BOARD)
import sqlite3

# main function to drive solar tracker
# Import moduesl
import database
import solarVector


# Creating the databases
# Solar Vectoring is mode 0 and Solar Tracking is mode 1 when using both is mode 2
# For calling functions in database daily database is assigned a value of 0 while full database is assigned a value of 1
# Calling functions in database import will be (which database, type of information stored, information)
# addToDatabaseInt
# addToDatabaseFloat
# addToDatabaseString

conn = sqlite3.connect('data')
c = conn.cursor()

c.execute(""" 
          CREATE TABLE dailyDatabase(
          power real, 
          xStroke real, 
          yStroke real, 
          mode integer, 
          time text
          )""")
conn.commit()

c.execute(""" 
          CREATE TABLE fullDatabase(
          power real, 
          sunrise text, 
          sunset text,
	  date text
          )""")

conn.commit()

# Initiating date and time

now = datetime.now()

curTime = now.strftime("%H:%M")

curHours = int(now.strftime("%H"))
curMinutes = int(now.strftime("%M"))

for line in DB:
	line[xStroke] = strokeX(line[latitude], line[longitude], line[date], line[time], line[tzn])
	line[yStroke] = strokeX(line[latitude], line[longitude], line[date], line[time], line[tzn])

def initAct():
	move(1, 'rev', 40)
	move(2, 'rev', 40)



# Sun Vectoring
initAct() 
curXStroke = 0
curYStroke = 0
while(mode == 0):
#	curTime =  get time from pi 
	if (curHours >== 10 and curMinutes % 5 == 0):
		newXStroke = #get value from DB for current time
		newYStroke = #get value from DB for current time
		if (curXStroke < newXStroke):
			move(1, 'fwd', (newXStroke-curXStroke)/10)
		else:
			move(1, 'rev', (curXStroke-newXStroke)/10)
		curXStroke = newXStroke
		if (curYStroke < yStroke):
			move(2, 'fwd', (newYStroke-curYStroke)/10)
		else:
			move(2, 'rev', (curYStroke-newYStroke)/10)
		curYStroke = newYStroke

# Solar Tracking

# Check back later
#  [tl, tr, bl, br] = read_photodiodes()
# actuator on front and right of device.
# set time to actuate for solar tracking
t = .10
if (tl > bl) and (tl > br) and (tr > bl) and (tr > br):
	move(1, 'fwd', t)
if (bl > tl) and (bl > tr) and (br > tl) and (br > tr):
	move(1, 'rev', t)

if (tr > tl) and (tr > bl) and (br > tl) and (br > bl):
	move(2, 'fwd', t)
if (tl > tr) and (tl > br) and (bl > tr) and (bl > tl):
	move(2, 'rev', t)
# Diagonal Conditions
if (tr > tl) and (tr > bl) and (tr > br):
	move(1, 'fwd', t)
	move(2, 'fwd', t)
if (tl > tr) and (tl > bl) and (tl > br):
	move(1, 'fwd', t)
	move(2, 'rev', t)
if (bl > tr) and (bl > tl) and (bl > br):
	move(1, 'rev', t)
	move(2, 'rev', t)
if (br > tl) and (br > tr) and (br > bl):
	move(1, 'rev', t)
	move(2, 'fwd', t)

def move(actNum, dir, t):
	if (actNum == 1):
		if (dir == 'fwd'):

		if (dir == 'rev'):

	if (actNum == 2):
		if (dir == 'fwd'):

		if(dir == 'rev'):

