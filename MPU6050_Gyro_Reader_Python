#Imports
# I2C smbus module
import smbus;
from time import sleep;

# Registers 
PWR_MGMT_1 = 0x6b;
SMPLRT_DIV = 0x19;
CONFIG = 0x1A;
GYRO_CONFIG = 0x1B;
INT_ENABLE = 0x38;
ACCEL_XOUT_H = 0x3B;
ACCEL_YOUT_H = 0x3D;
ACCEL_ZOUT_H = 0x3F;
GYRO_XOUT_H = 0x43;
GYRO_YOUT_H = 0X45;
GYRO_ZOUT_H = 0X47;

DEF mpu_iNIT():

# Write all data to registers

# power managment

bus.write_byte_data(Device_Address, PWR_MGMT_1,1);

# sample rate

bus.write_byte_data(Device_Address, SMPLRT_DIV,7);

# Config

bus.write_byte_data(Device_Address, GYRO_CONFIG, 24);

# Interupt Enable

bus.write_byte_data(Device_Address, INT_ENABLE, 1);

def read_raw_data(addr):

  # 16 bit data from 3 different dimensions
  high = bus.read_byte_data(Device_Address, addr);
  low = bus.read_byte_data(Device_Address, addr + 1);
  
  # concatenate high and low
  
  value = (high << 8) | low;
  
  # to get signed value must subtract total size of the data 
  if ( value > 32768):
    value = value - 65536
  return value
  
  bus = smbus.SMBus(0)
  Device_Address = 0x68;
  
  MPU_Init()
  
  while True:
  
    # read raw values
    
    # accelerometers divide by range to bring to real world measurments
    
    acc_x = read_raw_data(ACCEL_XOUT_H)/16384.0;
    acc_Y= read_raw_data(ACCEL_YOUT_H)/16384.0;
    acc_Z= read_raw_data(ACCEL_ZOUT_H)/168384.0;

    # gyroscopes divide by range to find real world measurments 131.0
    gyro_x = read_raw_data(GYRO_XOUT_H)/ 131.0;
    gyro_y = read_raw_data(GYRO_YOUT_H)/131.0;
    gyro_Z = read_raw_data(GYRO_ZOUT_H)/131.0;
    
    # Decide how we want to read and use these values

    
